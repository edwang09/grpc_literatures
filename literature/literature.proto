// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "gitbub.com/edwang09/jr-dev-test/literature";
option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";
option objc_class_prefix = "RTG";

package literature;

// Interface exported by the server.
service Literature {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc TestgRPC(Text) returns (Text) {}

  rpc GetAllAuthors(Empty) returns (AuthorList) {}
  rpc GetAuthor(AuthorId) returns (Author) {}
  rpc AddAuthor(NewAuthor) returns (Author) {}
  rpc EditAuthor(Author) returns (Author) {}
  rpc DeleteAuthor(AuthorId) returns (Empty) {}

  rpc GetAllBooks(Empty) returns (BookList) {}
  rpc GetBook(BookId) returns (Book) {}
  rpc AddBook(NewBook) returns (Book) {}
  rpc EditBook(Book) returns (Book) {}
  rpc DeleteBook(BookId) returns (Empty) {}
  
  rpc GetAllAwards(Empty) returns (AwardList) {}
  rpc GetAward(AwardId) returns (Award) {}
  rpc AddAward(NewAward) returns (Award) {}
  rpc EditAward(Award) returns (Award) {}
  rpc DeleteAward(AwardId) returns (Empty) {}

  rpc GetAllBookAuthors(Empty) returns (BookAuthorList) {}
  rpc GetBookAuthor(BookAuthorId) returns (BookAuthorDetail) {}
  rpc AddBookAuthor(NewBookAuthor) returns (BookAuthor) {}
  rpc EditBookAuthor(BookAuthor) returns (BookAuthor) {}
  rpc DeleteBookAuthor(BookAuthorId) returns (Empty) {}

  rpc GetAllAuthorGrants(Empty) returns (AuthorGrantList) {}
  rpc GetAuthorGrant(AuthorGrantId) returns (AuthorGrantDetail) {}
  rpc AddAuthorGrant(NewAuthorGrant) returns (AuthorGrant) {}
  rpc EditAuthorGrant(AuthorGrant) returns (AuthorGrant) {}
  rpc DeleteAuthorGrant(AuthorGrantId) returns (Empty) {}

  rpc GetAllBookGrants(Empty) returns (BookGrantList) {}
  rpc GetBookGrant(BookGrantId) returns (BookGrantDetail) {}
  rpc AddBookGrant(NewBookGrant) returns (BookGrant) {}
  rpc EditBookGrant(BookGrant) returns (BookGrant) {}
  rpc DeleteBookGrant(BookGrantId) returns (Empty) {}

  rpc MostAwardedAuthor(Empty) returns (MostAwardedAuthors) {}
  rpc MostAwardedBook(Pagination) returns (MostAwardedBooks) {}
  rpc MostGrantedAward(Empty) returns (MostGrantedAwards) {}
  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
//   rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
//   rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
//   rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}
message Text {
    string body = 1;
}
message Empty {
}
message AuthorId {
    int32 author_id = 1;
}
message Author {
  int32 author_id = 1;
  string author_name = 2;
}
message NewAuthor {
  string author_name = 1;
}
message AuthorList {
  repeated Author authors = 1;
}


message BookId {
  int32 book_id = 1;
}
message Book {
  int32 book_id = 1;
  string book_name = 2;
  string format = 3;
  string isbn = 4;
  int32 page = 5;
}
message NewBook {
  string book_name = 1;
  string format = 2;
  string isbn = 3;
  int32 page = 4;
}
message BookList {
  repeated Book books = 1;
}


message AwardId {
  int32 award_id = 1;
}
message Award {
  int32 award_id = 1;
  string award_name = 2;
}
message NewAward {
  string award_name = 1;
}
message AwardList {
  repeated Award awards = 1;
}


message BookAuthorId {
  int32 book_author_id = 1;
}
message BookAuthor {
  int32 book_author_id = 1;
  int32 book_id = 2;
  int32 author_id = 3;
}
message BookAuthorDetail {
  int32 book_author_id = 1;
  int32 book_id = 2;
  string book_name = 3;
  int32 author_id = 4;
  string author_name = 5;
}
message NewBookAuthor {
  int32 book_id = 1;
  int32 author_id = 2;
}
message BookAuthorList {
  repeated BookAuthorDetail book_authors = 1;
}

message AuthorGrantId {
  int32 author_grant_id = 1;
}
message AuthorGrant {
  int32 author_grant_id = 1;
  int32 award_id = 2;
  int32 author_id = 3;
}
message AuthorGrantDetail {
  int32 author_grant_id = 1;
  int32 award_id = 2;
  string award_name = 3;
  int32 author_id = 4;
  string author_name = 5;
}
message NewAuthorGrant {
  int32 award_id = 1;
  int32 author_id = 2;
}
message AuthorGrantList {
  repeated AuthorGrantDetail author_grants = 1;
}

message BookGrantId {
  int32 book_grant_id = 1;
}
message BookGrant {
  int32 book_grant_id = 1;
  int32 award_id = 2;
  int32 book_id = 3;
}
message BookGrantDetail {
  int32 book_grant_id = 1;
  int32 award_id = 2;
  string award_name = 3;
  int32 book_id = 4;
  string book_name = 5;
}
message NewBookGrant {
  int32 award_id = 1;
  int32 book_id = 2;
}
message BookGrantList {
  repeated BookGrantDetail book_grants = 1;
}



message MostAwardedAuthor {
  int32 author_id = 1;
  string author_name = 2;
  int32 awarded_time = 3;
}
message MostAwardedBook {
  int32 book_id = 1;
  string book_name = 2;
  string format = 3;
  string isbn = 4;
  int32 page = 5;
  int32 awarded_time = 6;
}
message MostGrantedAward {
  int32 award_id = 1;
  string award_name = 2;
  int32 awarded_time = 3;
}
message MostAwardedAuthors {
  repeated MostAwardedAuthor authors = 1;
}
message MostAwardedBooks {
  repeated MostAwardedBook books = 1;
}
message MostGrantedAwards {
  repeated MostGrantedAward awards = 1;
}
message Pagination{
  int32 page = 1;
}

/*
// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
*/