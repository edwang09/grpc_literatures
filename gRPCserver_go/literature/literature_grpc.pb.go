// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package literature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiteratureClient is the client API for Literature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiteratureClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	TestgRPC(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Text, error)
	GetAllAuthors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthorList, error)
	GetAuthor(ctx context.Context, in *AuthorId, opts ...grpc.CallOption) (*Author, error)
	AddAuthor(ctx context.Context, in *NewAuthor, opts ...grpc.CallOption) (*Author, error)
	EditAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error)
	DeleteAuthor(ctx context.Context, in *AuthorId, opts ...grpc.CallOption) (*Empty, error)
	GetAllBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookList, error)
	GetBook(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Book, error)
	AddBook(ctx context.Context, in *NewBook, opts ...grpc.CallOption) (*Book, error)
	EditBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	DeleteBook(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Empty, error)
	GetAllAwards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AwardList, error)
	GetAward(ctx context.Context, in *AwardId, opts ...grpc.CallOption) (*Award, error)
	AddAward(ctx context.Context, in *NewAward, opts ...grpc.CallOption) (*Award, error)
	EditAward(ctx context.Context, in *Award, opts ...grpc.CallOption) (*Award, error)
	DeleteAward(ctx context.Context, in *AwardId, opts ...grpc.CallOption) (*Empty, error)
	GetAllBookAuthors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookAuthorList, error)
	GetBookAuthor(ctx context.Context, in *BookAuthorId, opts ...grpc.CallOption) (*BookAuthorDetail, error)
	AddBookAuthor(ctx context.Context, in *NewBookAuthor, opts ...grpc.CallOption) (*BookAuthor, error)
	EditBookAuthor(ctx context.Context, in *BookAuthor, opts ...grpc.CallOption) (*BookAuthor, error)
	DeleteBookAuthor(ctx context.Context, in *BookAuthorId, opts ...grpc.CallOption) (*Empty, error)
	GetAllAuthorGrants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthorGrantList, error)
	GetAuthorGrant(ctx context.Context, in *AuthorGrantId, opts ...grpc.CallOption) (*AuthorGrantDetail, error)
	AddAuthorGrant(ctx context.Context, in *NewAuthorGrant, opts ...grpc.CallOption) (*AuthorGrant, error)
	EditAuthorGrant(ctx context.Context, in *AuthorGrant, opts ...grpc.CallOption) (*AuthorGrant, error)
	DeleteAuthorGrant(ctx context.Context, in *AuthorGrantId, opts ...grpc.CallOption) (*Empty, error)
	GetAllBookGrants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookGrantList, error)
	GetBookGrant(ctx context.Context, in *BookGrantId, opts ...grpc.CallOption) (*BookGrantDetail, error)
	AddBookGrant(ctx context.Context, in *NewBookGrant, opts ...grpc.CallOption) (*BookGrant, error)
	EditBookGrant(ctx context.Context, in *BookGrant, opts ...grpc.CallOption) (*BookGrant, error)
	DeleteBookGrant(ctx context.Context, in *BookGrantId, opts ...grpc.CallOption) (*Empty, error)
	MostAwardedAuthor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MostAwardedAuthors, error)
	MostAwardedBook(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*MostAwardedBooks, error)
	MostGrantedAward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MostGrantedAwards, error)
}

type literatureClient struct {
	cc grpc.ClientConnInterface
}

func NewLiteratureClient(cc grpc.ClientConnInterface) LiteratureClient {
	return &literatureClient{cc}
}

func (c *literatureClient) TestgRPC(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := c.cc.Invoke(ctx, "/literature.Literature/TestgRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAllAuthors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthorList, error) {
	out := new(AuthorList)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAllAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAuthor(ctx context.Context, in *AuthorId, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) AddAuthor(ctx context.Context, in *NewAuthor, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/literature.Literature/AddAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) EditAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/literature.Literature/EditAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) DeleteAuthor(ctx context.Context, in *AuthorId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/literature.Literature/DeleteAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAllBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAllBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetBook(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) AddBook(ctx context.Context, in *NewBook, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/literature.Literature/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) EditBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/literature.Literature/EditBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) DeleteBook(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/literature.Literature/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAllAwards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AwardList, error) {
	out := new(AwardList)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAllAwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAward(ctx context.Context, in *AwardId, opts ...grpc.CallOption) (*Award, error) {
	out := new(Award)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) AddAward(ctx context.Context, in *NewAward, opts ...grpc.CallOption) (*Award, error) {
	out := new(Award)
	err := c.cc.Invoke(ctx, "/literature.Literature/AddAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) EditAward(ctx context.Context, in *Award, opts ...grpc.CallOption) (*Award, error) {
	out := new(Award)
	err := c.cc.Invoke(ctx, "/literature.Literature/EditAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) DeleteAward(ctx context.Context, in *AwardId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/literature.Literature/DeleteAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAllBookAuthors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookAuthorList, error) {
	out := new(BookAuthorList)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAllBookAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetBookAuthor(ctx context.Context, in *BookAuthorId, opts ...grpc.CallOption) (*BookAuthorDetail, error) {
	out := new(BookAuthorDetail)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) AddBookAuthor(ctx context.Context, in *NewBookAuthor, opts ...grpc.CallOption) (*BookAuthor, error) {
	out := new(BookAuthor)
	err := c.cc.Invoke(ctx, "/literature.Literature/AddBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) EditBookAuthor(ctx context.Context, in *BookAuthor, opts ...grpc.CallOption) (*BookAuthor, error) {
	out := new(BookAuthor)
	err := c.cc.Invoke(ctx, "/literature.Literature/EditBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) DeleteBookAuthor(ctx context.Context, in *BookAuthorId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/literature.Literature/DeleteBookAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAllAuthorGrants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthorGrantList, error) {
	out := new(AuthorGrantList)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAllAuthorGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAuthorGrant(ctx context.Context, in *AuthorGrantId, opts ...grpc.CallOption) (*AuthorGrantDetail, error) {
	out := new(AuthorGrantDetail)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAuthorGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) AddAuthorGrant(ctx context.Context, in *NewAuthorGrant, opts ...grpc.CallOption) (*AuthorGrant, error) {
	out := new(AuthorGrant)
	err := c.cc.Invoke(ctx, "/literature.Literature/AddAuthorGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) EditAuthorGrant(ctx context.Context, in *AuthorGrant, opts ...grpc.CallOption) (*AuthorGrant, error) {
	out := new(AuthorGrant)
	err := c.cc.Invoke(ctx, "/literature.Literature/EditAuthorGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) DeleteAuthorGrant(ctx context.Context, in *AuthorGrantId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/literature.Literature/DeleteAuthorGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetAllBookGrants(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BookGrantList, error) {
	out := new(BookGrantList)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetAllBookGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) GetBookGrant(ctx context.Context, in *BookGrantId, opts ...grpc.CallOption) (*BookGrantDetail, error) {
	out := new(BookGrantDetail)
	err := c.cc.Invoke(ctx, "/literature.Literature/GetBookGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) AddBookGrant(ctx context.Context, in *NewBookGrant, opts ...grpc.CallOption) (*BookGrant, error) {
	out := new(BookGrant)
	err := c.cc.Invoke(ctx, "/literature.Literature/AddBookGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) EditBookGrant(ctx context.Context, in *BookGrant, opts ...grpc.CallOption) (*BookGrant, error) {
	out := new(BookGrant)
	err := c.cc.Invoke(ctx, "/literature.Literature/EditBookGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) DeleteBookGrant(ctx context.Context, in *BookGrantId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/literature.Literature/DeleteBookGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) MostAwardedAuthor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MostAwardedAuthors, error) {
	out := new(MostAwardedAuthors)
	err := c.cc.Invoke(ctx, "/literature.Literature/MostAwardedAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) MostAwardedBook(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*MostAwardedBooks, error) {
	out := new(MostAwardedBooks)
	err := c.cc.Invoke(ctx, "/literature.Literature/MostAwardedBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *literatureClient) MostGrantedAward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MostGrantedAwards, error) {
	out := new(MostGrantedAwards)
	err := c.cc.Invoke(ctx, "/literature.Literature/MostGrantedAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiteratureServer is the server API for Literature service.
// All implementations must embed UnimplementedLiteratureServer
// for forward compatibility
type LiteratureServer interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	TestgRPC(context.Context, *Text) (*Text, error)
	GetAllAuthors(context.Context, *Empty) (*AuthorList, error)
	GetAuthor(context.Context, *AuthorId) (*Author, error)
	AddAuthor(context.Context, *NewAuthor) (*Author, error)
	EditAuthor(context.Context, *Author) (*Author, error)
	DeleteAuthor(context.Context, *AuthorId) (*Empty, error)
	GetAllBooks(context.Context, *Empty) (*BookList, error)
	GetBook(context.Context, *BookId) (*Book, error)
	AddBook(context.Context, *NewBook) (*Book, error)
	EditBook(context.Context, *Book) (*Book, error)
	DeleteBook(context.Context, *BookId) (*Empty, error)
	GetAllAwards(context.Context, *Empty) (*AwardList, error)
	GetAward(context.Context, *AwardId) (*Award, error)
	AddAward(context.Context, *NewAward) (*Award, error)
	EditAward(context.Context, *Award) (*Award, error)
	DeleteAward(context.Context, *AwardId) (*Empty, error)
	GetAllBookAuthors(context.Context, *Empty) (*BookAuthorList, error)
	GetBookAuthor(context.Context, *BookAuthorId) (*BookAuthorDetail, error)
	AddBookAuthor(context.Context, *NewBookAuthor) (*BookAuthor, error)
	EditBookAuthor(context.Context, *BookAuthor) (*BookAuthor, error)
	DeleteBookAuthor(context.Context, *BookAuthorId) (*Empty, error)
	GetAllAuthorGrants(context.Context, *Empty) (*AuthorGrantList, error)
	GetAuthorGrant(context.Context, *AuthorGrantId) (*AuthorGrantDetail, error)
	AddAuthorGrant(context.Context, *NewAuthorGrant) (*AuthorGrant, error)
	EditAuthorGrant(context.Context, *AuthorGrant) (*AuthorGrant, error)
	DeleteAuthorGrant(context.Context, *AuthorGrantId) (*Empty, error)
	GetAllBookGrants(context.Context, *Empty) (*BookGrantList, error)
	GetBookGrant(context.Context, *BookGrantId) (*BookGrantDetail, error)
	AddBookGrant(context.Context, *NewBookGrant) (*BookGrant, error)
	EditBookGrant(context.Context, *BookGrant) (*BookGrant, error)
	DeleteBookGrant(context.Context, *BookGrantId) (*Empty, error)
	MostAwardedAuthor(context.Context, *Empty) (*MostAwardedAuthors, error)
	MostAwardedBook(context.Context, *Pagination) (*MostAwardedBooks, error)
	MostGrantedAward(context.Context, *Empty) (*MostGrantedAwards, error)
	mustEmbedUnimplementedLiteratureServer()
}

// UnimplementedLiteratureServer must be embedded to have forward compatible implementations.
type UnimplementedLiteratureServer struct {
}

func (UnimplementedLiteratureServer) TestgRPC(context.Context, *Text) (*Text, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestgRPC not implemented")
}
func (UnimplementedLiteratureServer) GetAllAuthors(context.Context, *Empty) (*AuthorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAuthors not implemented")
}
func (UnimplementedLiteratureServer) GetAuthor(context.Context, *AuthorId) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedLiteratureServer) AddAuthor(context.Context, *NewAuthor) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthor not implemented")
}
func (UnimplementedLiteratureServer) EditAuthor(context.Context, *Author) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAuthor not implemented")
}
func (UnimplementedLiteratureServer) DeleteAuthor(context.Context, *AuthorId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedLiteratureServer) GetAllBooks(context.Context, *Empty) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBooks not implemented")
}
func (UnimplementedLiteratureServer) GetBook(context.Context, *BookId) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedLiteratureServer) AddBook(context.Context, *NewBook) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedLiteratureServer) EditBook(context.Context, *Book) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBook not implemented")
}
func (UnimplementedLiteratureServer) DeleteBook(context.Context, *BookId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedLiteratureServer) GetAllAwards(context.Context, *Empty) (*AwardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAwards not implemented")
}
func (UnimplementedLiteratureServer) GetAward(context.Context, *AwardId) (*Award, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAward not implemented")
}
func (UnimplementedLiteratureServer) AddAward(context.Context, *NewAward) (*Award, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAward not implemented")
}
func (UnimplementedLiteratureServer) EditAward(context.Context, *Award) (*Award, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAward not implemented")
}
func (UnimplementedLiteratureServer) DeleteAward(context.Context, *AwardId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAward not implemented")
}
func (UnimplementedLiteratureServer) GetAllBookAuthors(context.Context, *Empty) (*BookAuthorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBookAuthors not implemented")
}
func (UnimplementedLiteratureServer) GetBookAuthor(context.Context, *BookAuthorId) (*BookAuthorDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookAuthor not implemented")
}
func (UnimplementedLiteratureServer) AddBookAuthor(context.Context, *NewBookAuthor) (*BookAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBookAuthor not implemented")
}
func (UnimplementedLiteratureServer) EditBookAuthor(context.Context, *BookAuthor) (*BookAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBookAuthor not implemented")
}
func (UnimplementedLiteratureServer) DeleteBookAuthor(context.Context, *BookAuthorId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookAuthor not implemented")
}
func (UnimplementedLiteratureServer) GetAllAuthorGrants(context.Context, *Empty) (*AuthorGrantList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAuthorGrants not implemented")
}
func (UnimplementedLiteratureServer) GetAuthorGrant(context.Context, *AuthorGrantId) (*AuthorGrantDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorGrant not implemented")
}
func (UnimplementedLiteratureServer) AddAuthorGrant(context.Context, *NewAuthorGrant) (*AuthorGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthorGrant not implemented")
}
func (UnimplementedLiteratureServer) EditAuthorGrant(context.Context, *AuthorGrant) (*AuthorGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAuthorGrant not implemented")
}
func (UnimplementedLiteratureServer) DeleteAuthorGrant(context.Context, *AuthorGrantId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorGrant not implemented")
}
func (UnimplementedLiteratureServer) GetAllBookGrants(context.Context, *Empty) (*BookGrantList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBookGrants not implemented")
}
func (UnimplementedLiteratureServer) GetBookGrant(context.Context, *BookGrantId) (*BookGrantDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookGrant not implemented")
}
func (UnimplementedLiteratureServer) AddBookGrant(context.Context, *NewBookGrant) (*BookGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBookGrant not implemented")
}
func (UnimplementedLiteratureServer) EditBookGrant(context.Context, *BookGrant) (*BookGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBookGrant not implemented")
}
func (UnimplementedLiteratureServer) DeleteBookGrant(context.Context, *BookGrantId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookGrant not implemented")
}
func (UnimplementedLiteratureServer) MostAwardedAuthor(context.Context, *Empty) (*MostAwardedAuthors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MostAwardedAuthor not implemented")
}
func (UnimplementedLiteratureServer) MostAwardedBook(context.Context, *Pagination) (*MostAwardedBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MostAwardedBook not implemented")
}
func (UnimplementedLiteratureServer) MostGrantedAward(context.Context, *Empty) (*MostGrantedAwards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MostGrantedAward not implemented")
}
func (UnimplementedLiteratureServer) mustEmbedUnimplementedLiteratureServer() {}

// UnsafeLiteratureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiteratureServer will
// result in compilation errors.
type UnsafeLiteratureServer interface {
	mustEmbedUnimplementedLiteratureServer()
}

func RegisterLiteratureServer(s grpc.ServiceRegistrar, srv LiteratureServer) {
	s.RegisterService(&Literature_ServiceDesc, srv)
}

func _Literature_TestgRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).TestgRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/TestgRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).TestgRPC(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAllAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAllAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAllAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAllAuthors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAuthor(ctx, req.(*AuthorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/AddAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).AddAuthor(ctx, req.(*NewAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_EditAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).EditAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/EditAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).EditAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/DeleteAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).DeleteAuthor(ctx, req.(*AuthorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAllBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAllBooks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetBook(ctx, req.(*BookId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).AddBook(ctx, req.(*NewBook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_EditBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).EditBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/EditBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).EditBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).DeleteBook(ctx, req.(*BookId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAllAwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAllAwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAllAwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAllAwards(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAward(ctx, req.(*AwardId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_AddAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).AddAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/AddAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).AddAward(ctx, req.(*NewAward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_EditAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Award)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).EditAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/EditAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).EditAward(ctx, req.(*Award))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_DeleteAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).DeleteAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/DeleteAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).DeleteAward(ctx, req.(*AwardId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAllBookAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAllBookAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAllBookAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAllBookAuthors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAuthorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetBookAuthor(ctx, req.(*BookAuthorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_AddBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBookAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).AddBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/AddBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).AddBookAuthor(ctx, req.(*NewBookAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_EditBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).EditBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/EditBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).EditBookAuthor(ctx, req.(*BookAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_DeleteBookAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAuthorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).DeleteBookAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/DeleteBookAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).DeleteBookAuthor(ctx, req.(*BookAuthorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAllAuthorGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAllAuthorGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAllAuthorGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAllAuthorGrants(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAuthorGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorGrantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAuthorGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAuthorGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAuthorGrant(ctx, req.(*AuthorGrantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_AddAuthorGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAuthorGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).AddAuthorGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/AddAuthorGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).AddAuthorGrant(ctx, req.(*NewAuthorGrant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_EditAuthorGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).EditAuthorGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/EditAuthorGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).EditAuthorGrant(ctx, req.(*AuthorGrant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_DeleteAuthorGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorGrantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).DeleteAuthorGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/DeleteAuthorGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).DeleteAuthorGrant(ctx, req.(*AuthorGrantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetAllBookGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetAllBookGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetAllBookGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetAllBookGrants(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_GetBookGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookGrantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).GetBookGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/GetBookGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).GetBookGrant(ctx, req.(*BookGrantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_AddBookGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBookGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).AddBookGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/AddBookGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).AddBookGrant(ctx, req.(*NewBookGrant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_EditBookGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).EditBookGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/EditBookGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).EditBookGrant(ctx, req.(*BookGrant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_DeleteBookGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookGrantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).DeleteBookGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/DeleteBookGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).DeleteBookGrant(ctx, req.(*BookGrantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_MostAwardedAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).MostAwardedAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/MostAwardedAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).MostAwardedAuthor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_MostAwardedBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).MostAwardedBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/MostAwardedBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).MostAwardedBook(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Literature_MostGrantedAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiteratureServer).MostGrantedAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/literature.Literature/MostGrantedAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiteratureServer).MostGrantedAward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Literature_ServiceDesc is the grpc.ServiceDesc for Literature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Literature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "literature.Literature",
	HandlerType: (*LiteratureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestgRPC",
			Handler:    _Literature_TestgRPC_Handler,
		},
		{
			MethodName: "GetAllAuthors",
			Handler:    _Literature_GetAllAuthors_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _Literature_GetAuthor_Handler,
		},
		{
			MethodName: "AddAuthor",
			Handler:    _Literature_AddAuthor_Handler,
		},
		{
			MethodName: "EditAuthor",
			Handler:    _Literature_EditAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _Literature_DeleteAuthor_Handler,
		},
		{
			MethodName: "GetAllBooks",
			Handler:    _Literature_GetAllBooks_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _Literature_GetBook_Handler,
		},
		{
			MethodName: "AddBook",
			Handler:    _Literature_AddBook_Handler,
		},
		{
			MethodName: "EditBook",
			Handler:    _Literature_EditBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _Literature_DeleteBook_Handler,
		},
		{
			MethodName: "GetAllAwards",
			Handler:    _Literature_GetAllAwards_Handler,
		},
		{
			MethodName: "GetAward",
			Handler:    _Literature_GetAward_Handler,
		},
		{
			MethodName: "AddAward",
			Handler:    _Literature_AddAward_Handler,
		},
		{
			MethodName: "EditAward",
			Handler:    _Literature_EditAward_Handler,
		},
		{
			MethodName: "DeleteAward",
			Handler:    _Literature_DeleteAward_Handler,
		},
		{
			MethodName: "GetAllBookAuthors",
			Handler:    _Literature_GetAllBookAuthors_Handler,
		},
		{
			MethodName: "GetBookAuthor",
			Handler:    _Literature_GetBookAuthor_Handler,
		},
		{
			MethodName: "AddBookAuthor",
			Handler:    _Literature_AddBookAuthor_Handler,
		},
		{
			MethodName: "EditBookAuthor",
			Handler:    _Literature_EditBookAuthor_Handler,
		},
		{
			MethodName: "DeleteBookAuthor",
			Handler:    _Literature_DeleteBookAuthor_Handler,
		},
		{
			MethodName: "GetAllAuthorGrants",
			Handler:    _Literature_GetAllAuthorGrants_Handler,
		},
		{
			MethodName: "GetAuthorGrant",
			Handler:    _Literature_GetAuthorGrant_Handler,
		},
		{
			MethodName: "AddAuthorGrant",
			Handler:    _Literature_AddAuthorGrant_Handler,
		},
		{
			MethodName: "EditAuthorGrant",
			Handler:    _Literature_EditAuthorGrant_Handler,
		},
		{
			MethodName: "DeleteAuthorGrant",
			Handler:    _Literature_DeleteAuthorGrant_Handler,
		},
		{
			MethodName: "GetAllBookGrants",
			Handler:    _Literature_GetAllBookGrants_Handler,
		},
		{
			MethodName: "GetBookGrant",
			Handler:    _Literature_GetBookGrant_Handler,
		},
		{
			MethodName: "AddBookGrant",
			Handler:    _Literature_AddBookGrant_Handler,
		},
		{
			MethodName: "EditBookGrant",
			Handler:    _Literature_EditBookGrant_Handler,
		},
		{
			MethodName: "DeleteBookGrant",
			Handler:    _Literature_DeleteBookGrant_Handler,
		},
		{
			MethodName: "MostAwardedAuthor",
			Handler:    _Literature_MostAwardedAuthor_Handler,
		},
		{
			MethodName: "MostAwardedBook",
			Handler:    _Literature_MostAwardedBook_Handler,
		},
		{
			MethodName: "MostGrantedAward",
			Handler:    _Literature_MostGrantedAward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "literature/literature.proto",
}
